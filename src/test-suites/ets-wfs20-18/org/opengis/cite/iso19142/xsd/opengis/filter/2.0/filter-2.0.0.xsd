<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema targetNamespace="http://www.opengis.net/fes/2.0"
  xmlns:fes="http://www.opengis.net/fes/2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:ows="http://www.opengis.net/ows/1.1" elementFormDefault="qualified" version="2.0.0">

  <xsd:annotation>
    <xsd:documentation> This XML Schema document includes and imports, directly or indirectly, all
      the XML Schema defined by the Filter Encoding Standard. Filter Encoding is an OGC Standard.
      Copyright (c) 2010 Open Geospatial Consortium, Inc. All Rights Reserved. To obtain additional
      rights of use, visit http://www.opengeospatial.org/legal/ . </xsd:documentation>
    <xsd:documentation source="http://portal.opengeospatial.org/files/?artifact_id=39968">OpenGIS
      Filter Encoding 2.0 Encoding Standard (OGC 09-026r1/ISO 19143:2010)</xsd:documentation>
  </xsd:annotation>

  <xsd:import namespace="http://www.w3.org/XML/1998/namespace"
    schemaLocation="http://www.w3.org/2001/xml.xsd"/>
  <xsd:import namespace="http://www.opengis.net/ows/1.1"
    schemaLocation="http://schemas.opengis.net/ows/1.1.0/owsAll.xsd"/>

  <xsd:element name="AbstractQueryExpression" type="fes:AbstractQueryExpressionType" abstract="true"/>
  <xsd:complexType name="AbstractQueryExpressionType" abstract="true">
    <xsd:attribute name="handle" type="xsd:string"/>
  </xsd:complexType>

  <xsd:element name="AbstractAdhocQueryExpression" type="fes:AbstractAdhocQueryExpressionType"
    substitutionGroup="fes:AbstractQueryExpression" abstract="true"/>
  <xsd:complexType name="AbstractAdhocQueryExpressionType" abstract="true">
    <xsd:complexContent>
      <xsd:extension base="fes:AbstractQueryExpressionType">
        <xsd:sequence>
          <xsd:element ref="fes:AbstractProjectionClause" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="fes:AbstractSelectionClause" minOccurs="0"/>
          <xsd:element ref="fes:AbstractSortingClause" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="typeNames" type="fes:TypeNamesListType" use="required"/>
        <xsd:attribute name="aliases" type="fes:AliasesType"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:simpleType name="TypeNamesListType">
    <xsd:list itemType="fes:TypeNamesType"/>
  </xsd:simpleType>
  <xsd:simpleType name="TypeNamesType">
    <xsd:union memberTypes="fes:SchemaElement xsd:QName"/>
  </xsd:simpleType>
  <xsd:simpleType name="SchemaElement">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="schema\-element\(.+\)"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="AliasesType">
    <xsd:list itemType="xsd:NCName"/>
  </xsd:simpleType>

  <xsd:element name="AbstractProjectionClause" abstract="true"/>
  <xsd:complexType name="AbstractProjectionClauseType" abstract="true"/>

  <xsd:element name="AbstractSelectionClause" abstract="true"/>
  <xsd:complexType name="AbstractSelectionClauseType" abstract="true"/>

  <xsd:element name="AbstractSortingClause" abstract="true"/>
  <xsd:complexType name="AbstractSortingClauseType" abstract="true"/>
  <xsd:element name="Filter_Capabilities">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="Conformance" type="fes:ConformanceType"/>
        <xsd:element name="Id_Capabilities" type="fes:Id_CapabilitiesType" minOccurs="0"/>
        <xsd:element name="Scalar_Capabilities" type="fes:Scalar_CapabilitiesType" minOccurs="0"/>
        <xsd:element name="Spatial_Capabilities" type="fes:Spatial_CapabilitiesType" minOccurs="0"/>
        <xsd:element name="Temporal_Capabilities" type="fes:Temporal_CapabilitiesType" minOccurs="0"/>
        <xsd:element name="Functions" type="fes:AvailableFunctionsType" minOccurs="0"/>
        <xsd:element name="Extended_Capabilities" type="fes:Extended_CapabilitiesType" minOccurs="0"
        />
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>

  <xsd:complexType name="ConformanceType">
    <xsd:sequence>
      <xsd:element name="Constraint" type="ows:DomainType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="Id_CapabilitiesType">
    <xsd:sequence>
      <xsd:element name="ResourceIdentifier" type="fes:ResourceIdentifierType" maxOccurs="unbounded"
      />
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ResourceIdentifierType">
    <xsd:sequence>
      <xsd:element ref="ows:Metadata" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:QName" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="Scalar_CapabilitiesType">
    <xsd:sequence>
      <xsd:element ref="fes:LogicalOperators" minOccurs="0"/>
      <xsd:element name="ComparisonOperators" type="fes:ComparisonOperatorsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="LogicalOperators">
    <xsd:complexType/>
  </xsd:element>
  <xsd:complexType name="ComparisonOperatorsType">
    <xsd:sequence maxOccurs="unbounded">
      <xsd:element name="ComparisonOperator" type="fes:ComparisonOperatorType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ComparisonOperatorType">
    <xsd:attribute name="name" type="fes:ComparisonOperatorNameType" use="required"/>
  </xsd:complexType>
  <xsd:simpleType name="ComparisonOperatorNameType">
    <xsd:union>
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="PropertyIsEqualTo"/>
          <xsd:enumeration value="PropertyIsNotEqualTo"/>
          <xsd:enumeration value="PropertyIsLessThan"/>
          <xsd:enumeration value="PropertyIsGreaterThan"/>
          <xsd:enumeration value="PropertyIsLessThanOrEqualTo"/>
          <xsd:enumeration value="PropertyIsGreaterThanOrEqualTo"/>
          <xsd:enumeration value="PropertyIsLike"/>
          <xsd:enumeration value="PropertyIsNull"/>
          <xsd:enumeration value="PropertyIsNil"/>
          <xsd:enumeration value="PropertyIsBetween"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
          <xsd:pattern value="extension:\w{2,}"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:union>
  </xsd:simpleType>
  <xsd:complexType name="AvailableFunctionsType">
    <xsd:sequence>
      <xsd:element name="Function" type="fes:AvailableFunctionType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="AvailableFunctionType">
    <xsd:sequence>
      <xsd:element ref="ows:Metadata" minOccurs="0"/>
      <xsd:element name="Returns" type="xsd:QName"/>
      <xsd:element name="Arguments" type="fes:ArgumentsType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:string" use="required"/>
  </xsd:complexType>
  <xsd:complexType name="ArgumentsType">
    <xsd:sequence>
      <xsd:element name="Argument" type="fes:ArgumentType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ArgumentType">
    <xsd:sequence>
      <xsd:element ref="ows:Metadata" minOccurs="0"/>
      <xsd:element name="Type" type="xsd:QName"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:string" use="required"/>
  </xsd:complexType>

  <xsd:complexType name="Spatial_CapabilitiesType">
    <xsd:sequence>
      <xsd:element name="GeometryOperands" type="fes:GeometryOperandsType"/>
      <xsd:element name="SpatialOperators" type="fes:SpatialOperatorsType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="GeometryOperandsType">
    <xsd:sequence>
      <xsd:element name="GeometryOperand" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:attribute name="name" type="xsd:QName" use="required"/>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="SpatialOperatorsType">
    <xsd:sequence>
      <xsd:element name="SpatialOperator" type="fes:SpatialOperatorType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="SpatialOperatorType">
    <xsd:sequence>
      <xsd:element name="GeometryOperands" type="fes:GeometryOperandsType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="fes:SpatialOperatorNameType"/>
  </xsd:complexType>
  <xsd:simpleType name="SpatialOperatorNameType">
    <xsd:union>
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="BBOX"/>
          <xsd:enumeration value="Equals"/>
          <xsd:enumeration value="Disjoint"/>
          <xsd:enumeration value="Intersects"/>
          <xsd:enumeration value="Touches"/>
          <xsd:enumeration value="Crosses"/>
          <xsd:enumeration value="Within"/>
          <xsd:enumeration value="Contains"/>
          <xsd:enumeration value="Overlaps"/>
          <xsd:enumeration value="Beyond"/>
          <xsd:enumeration value="DWithin"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
          <xsd:pattern value="extension:\w{2,}"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:union>
  </xsd:simpleType>

  <xsd:complexType name="Temporal_CapabilitiesType">
    <xsd:sequence>
      <xsd:element name="TemporalOperands" type="fes:TemporalOperandsType"/>
      <xsd:element name="TemporalOperators" type="fes:TemporalOperatorsType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="TemporalOperandsType">
    <xsd:sequence>
      <xsd:element name="TemporalOperand" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:attribute name="name" type="xsd:QName" use="required"/>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="TemporalOperatorsType">
    <xsd:sequence>
      <xsd:element name="TemporalOperator" type="fes:TemporalOperatorType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="TemporalOperatorType">
    <xsd:sequence>
      <xsd:element name="TemporalOperands" type="fes:TemporalOperandsType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="fes:TemporalOperatorNameType" use="required"/>
  </xsd:complexType>
  <xsd:simpleType name="TemporalOperatorNameType">
    <xsd:union>
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="After"/>
          <xsd:enumeration value="Before"/>
          <xsd:enumeration value="Begins"/>
          <xsd:enumeration value="BegunBy"/>
          <xsd:enumeration value="TContains"/>
          <xsd:enumeration value="During"/>
          <xsd:enumeration value="TEquals"/>
          <xsd:enumeration value="TOverlaps"/>
          <xsd:enumeration value="Meets"/>
          <xsd:enumeration value="OverlappedBy"/>
          <xsd:enumeration value="MetBy"/>
          <xsd:enumeration value="Ends"/>
          <xsd:enumeration value="EndedBy"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
          <xsd:pattern value="extension:\w{2,}"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:union>
  </xsd:simpleType>

  <xsd:complexType name="Extended_CapabilitiesType">
    <xsd:sequence>
      <xsd:element name="AdditionalOperators" type="fes:AdditionalOperatorsType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="AdditionalOperatorsType">
    <xsd:sequence>
      <xsd:element name="Operator" type="fes:ExtensionOperatorType" minOccurs="0"
        maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ExtensionOperatorType">
    <xsd:attribute name="name" type="xsd:QName" use="required"/>
  </xsd:complexType>

  <xsd:element name="Filter" type="fes:FilterType" substitutionGroup="fes:AbstractSelectionClause"/>
  <xsd:complexType name="FilterType">
    <xsd:complexContent>
      <xsd:extension base="fes:AbstractSelectionClauseType">
        <xsd:sequence>
          <xsd:group ref="fes:FilterPredicates"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:group name="FilterPredicates">
    <xsd:choice>
      <xsd:element ref="fes:comparisonOps"/>
      <xsd:element ref="fes:spatialOps"/>
      <xsd:element ref="fes:temporalOps"/>
      <xsd:element ref="fes:logicOps"/>
      <xsd:element ref="fes:extensionOps"/>
      <xsd:element ref="fes:Function"/>
      <xsd:element ref="fes:_Id" maxOccurs="unbounded"/>
    </xsd:choice>
  </xsd:group>

  <xsd:element name="comparisonOps" type="fes:ComparisonOpsType" abstract="true"/>
  <xsd:complexType name="ComparisonOpsType" abstract="true"/>
  <xsd:element name="PropertyIsEqualTo" type="fes:BinaryComparisonOpType"
    substitutionGroup="fes:comparisonOps"/>
  <xsd:element name="PropertyIsNotEqualTo" type="fes:BinaryComparisonOpType"
    substitutionGroup="fes:comparisonOps"/>
  <xsd:element name="PropertyIsLessThan" type="fes:BinaryComparisonOpType"
    substitutionGroup="fes:comparisonOps"/>
  <xsd:element name="PropertyIsGreaterThan" type="fes:BinaryComparisonOpType"
    substitutionGroup="fes:comparisonOps"/>
  <xsd:element name="PropertyIsLessThanOrEqualTo" type="fes:BinaryComparisonOpType"
    substitutionGroup="fes:comparisonOps"/>
  <xsd:element name="PropertyIsGreaterThanOrEqualTo" type="fes:BinaryComparisonOpType"
    substitutionGroup="fes:comparisonOps"/>
  <xsd:element name="PropertyIsLike" type="fes:PropertyIsLikeType"
    substitutionGroup="fes:comparisonOps"/>
  <xsd:element name="PropertyIsNull" type="fes:PropertyIsNullType"
    substitutionGroup="fes:comparisonOps"/>
  <xsd:element name="PropertyIsNil" type="fes:PropertyIsNilType"
    substitutionGroup="fes:comparisonOps"/>
  <xsd:element name="PropertyIsBetween" type="fes:PropertyIsBetweenType"
    substitutionGroup="fes:comparisonOps"/>

  <xsd:element name="spatialOps" type="fes:SpatialOpsType" abstract="true"/>
  <xsd:complexType name="SpatialOpsType" abstract="true"/>
  <xsd:element name="Equals" type="fes:BinarySpatialOpType" substitutionGroup="fes:spatialOps"/>
  <xsd:element name="Disjoint" type="fes:BinarySpatialOpType" substitutionGroup="fes:spatialOps"/>
  <xsd:element name="Touches" type="fes:BinarySpatialOpType" substitutionGroup="fes:spatialOps"/>
  <xsd:element name="Within" type="fes:BinarySpatialOpType" substitutionGroup="fes:spatialOps"/>
  <xsd:element name="Overlaps" type="fes:BinarySpatialOpType" substitutionGroup="fes:spatialOps"/>
  <xsd:element name="Crosses" type="fes:BinarySpatialOpType" substitutionGroup="fes:spatialOps"/>
  <xsd:element name="Intersects" type="fes:BinarySpatialOpType" substitutionGroup="fes:spatialOps"/>
  <xsd:element name="Contains" type="fes:BinarySpatialOpType" substitutionGroup="fes:spatialOps"/>
  <xsd:element name="DWithin" type="fes:DistanceBufferType" substitutionGroup="fes:spatialOps"/>
  <xsd:element name="Beyond" type="fes:DistanceBufferType" substitutionGroup="fes:spatialOps"/>
  <xsd:element name="BBOX" type="fes:BBOXType" substitutionGroup="fes:spatialOps"/>

  <xsd:element name="temporalOps" type="fes:TemporalOpsType" abstract="true"/>
  <xsd:complexType name="TemporalOpsType" abstract="true"/>
  <xsd:element name="After" type="fes:BinaryTemporalOpType" substitutionGroup="fes:temporalOps"/>
  <xsd:element name="Before" type="fes:BinaryTemporalOpType" substitutionGroup="fes:temporalOps"/>
  <xsd:element name="Begins" type="fes:BinaryTemporalOpType" substitutionGroup="fes:temporalOps"/>
  <xsd:element name="BegunBy" type="fes:BinaryTemporalOpType" substitutionGroup="fes:temporalOps"/>
  <xsd:element name="TContains" type="fes:BinaryTemporalOpType" substitutionGroup="fes:temporalOps"/>
  <xsd:element name="During" type="fes:BinaryTemporalOpType" substitutionGroup="fes:temporalOps"/>
  <xsd:element name="EndedBy" type="fes:BinaryTemporalOpType" substitutionGroup="fes:temporalOps"/>
  <xsd:element name="Ends" type="fes:BinaryTemporalOpType" substitutionGroup="fes:temporalOps"/>
  <xsd:element name="TEquals" type="fes:BinaryTemporalOpType" substitutionGroup="fes:temporalOps"/>
  <xsd:element name="Meets" type="fes:BinaryTemporalOpType" substitutionGroup="fes:temporalOps"/>
  <xsd:element name="MetBy" type="fes:BinaryTemporalOpType" substitutionGroup="fes:temporalOps"/>
  <xsd:element name="TOverlaps" type="fes:BinaryTemporalOpType" substitutionGroup="fes:temporalOps"/>
  <xsd:element name="OverlappedBy" type="fes:BinaryTemporalOpType"
    substitutionGroup="fes:temporalOps"/>
  <xsd:element name="AnyInteracts" type="fes:BinaryTemporalOpType"
    substitutionGroup="fes:temporalOps"/>

  <xsd:element name="logicOps" type="fes:LogicOpsType" abstract="true"/>
  <xsd:complexType name="LogicOpsType" abstract="true"/>
  <xsd:element name="And" type="fes:BinaryLogicOpType" substitutionGroup="fes:logicOps"/>
  <xsd:element name="Or" type="fes:BinaryLogicOpType" substitutionGroup="fes:logicOps"/>
  <xsd:element name="Not" type="fes:UnaryLogicOpType" substitutionGroup="fes:logicOps"/>

  <xsd:element name="extensionOps" type="fes:ExtensionOpsType" abstract="true"/>
  <xsd:complexType name="ExtensionOpsType" abstract="true"/>

  <xsd:element name="_Id" type="fes:AbstractIdType" abstract="true"/>
  <xsd:complexType name="AbstractIdType" abstract="true"/>

  <xsd:element name="ResourceId" type="fes:ResourceIdType" substitutionGroup="fes:_Id"/>
  <xsd:complexType name="ResourceIdType">
    <xsd:complexContent>
      <xsd:extension base="fes:AbstractIdType">
        <xsd:attribute name="rid" type="xsd:string" use="required"/>
        <xsd:attribute name="previousRid" type="xsd:string"/>
        <xsd:attribute name="version" type="fes:VersionType"/>
        <xsd:attribute name="startDate" type="xsd:dateTime"/>
        <xsd:attribute name="endDate" type="xsd:dateTime"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="VersionType">
    <xsd:union memberTypes="fes:VersionActionTokens xsd:positiveInteger xsd:dateTime"/>
  </xsd:simpleType>
  <xsd:simpleType name="VersionActionTokens">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="FIRST"/>
      <xsd:enumeration value="LAST"/>
      <xsd:enumeration value="PREVIOUS"/>
      <xsd:enumeration value="NEXT"/>
      <xsd:enumeration value="ALL"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="BinaryComparisonOpType">
    <xsd:complexContent>
      <xsd:extension base="fes:ComparisonOpsType">
        <xsd:sequence>
          <xsd:element ref="fes:expression" minOccurs="2" maxOccurs="2"/>
        </xsd:sequence>
        <xsd:attribute name="matchCase" type="xsd:boolean" use="optional" default="true"/>
        <xsd:attribute name="matchAction" type="fes:MatchActionType" use="optional" default="Any"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="MatchActionType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="All"/>
      <xsd:enumeration value="Any"/>
      <xsd:enumeration value="One"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="PropertyIsLikeType">
    <xsd:complexContent>
      <xsd:extension base="fes:ComparisonOpsType">
        <xsd:sequence>
          <xsd:element ref="fes:expression" minOccurs="2" maxOccurs="2"/>
        </xsd:sequence>
        <xsd:attribute name="wildCard" type="xsd:string" use="required"/>
        <xsd:attribute name="singleChar" type="xsd:string" use="required"/>
        <xsd:attribute name="escapeChar" type="xsd:string" use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PropertyIsNullType">
    <xsd:complexContent>
      <xsd:extension base="fes:ComparisonOpsType">
        <xsd:sequence>
          <xsd:element ref="fes:expression" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PropertyIsNilType">
    <xsd:complexContent>
      <xsd:extension base="fes:ComparisonOpsType">
        <xsd:sequence>
          <xsd:element ref="fes:expression" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="nilReason" type="xsd:string"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="PropertyIsBetweenType">
    <xsd:complexContent>
      <xsd:extension base="fes:ComparisonOpsType">
        <xsd:sequence>
          <xsd:element ref="fes:expression"/>
          <xsd:element name="LowerBoundary" type="fes:LowerBoundaryType"/>
          <xsd:element name="UpperBoundary" type="fes:UpperBoundaryType"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="LowerBoundaryType">
    <xsd:choice>
      <xsd:element ref="fes:expression"/>
    </xsd:choice>
  </xsd:complexType>
  <xsd:complexType name="UpperBoundaryType">
    <xsd:sequence>
      <xsd:element ref="fes:expression"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="BinarySpatialOpType">
    <xsd:complexContent>
      <xsd:extension base="fes:SpatialOpsType">
        <xsd:sequence>
          <xsd:element ref="fes:ValueReference"/>
          <xsd:choice>
            <xsd:element ref="fes:expression"/>
            <xsd:any namespace="##other"/>
          </xsd:choice>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BinaryTemporalOpType">
    <xsd:complexContent>
      <xsd:extension base="fes:TemporalOpsType">
        <xsd:sequence>
          <xsd:element ref="fes:ValueReference"/>
          <xsd:choice>
            <xsd:element ref="fes:expression"/>
            <xsd:any namespace="##other"/>
          </xsd:choice>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BBOXType">
    <xsd:complexContent>
      <xsd:extension base="fes:SpatialOpsType">
        <xsd:sequence>
          <xsd:element ref="fes:expression" minOccurs="0"/>
          <xsd:any namespace="##other"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="DistanceBufferType">
    <xsd:complexContent>
      <xsd:extension base="fes:SpatialOpsType">
        <xsd:sequence>
          <xsd:element ref="fes:expression" minOccurs="0"/>
          <xsd:any namespace="##other"/>
          <xsd:element name="Distance" type="fes:MeasureType"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="BinaryLogicOpType">
    <xsd:complexContent>
      <xsd:extension base="fes:LogicOpsType">
        <xsd:choice minOccurs="2" maxOccurs="unbounded">
          <xsd:group ref="fes:FilterPredicates"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="UnaryLogicOpType">
    <xsd:complexContent>
      <xsd:extension base="fes:LogicOpsType">
        <xsd:sequence>
          <xsd:choice>
            <xsd:group ref="fes:FilterPredicates"/>
          </xsd:choice>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="MeasureType">
    <xsd:simpleContent>
      <xsd:extension base="xsd:double">
        <xsd:attribute name="uom" type="fes:UomIdentifier" use="required"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:simpleType name="UomIdentifier">
    <xsd:union memberTypes="fes:UomSymbol fes:UomURI"/>
  </xsd:simpleType>
  <xsd:simpleType name="UomSymbol">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[^: \n\r\t]+"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="UomURI">
    <xsd:restriction base="xsd:anyURI">
      <xsd:pattern value="([a-zA-Z][a-zA-Z0-9\-\+\.]*:|\.\./|\./|#).*"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:element name="expression" abstract="true"/>
  <xsd:element name="ValueReference" type="xsd:string" substitutionGroup="fes:expression"/>
  <xsd:element name="Function" type="fes:FunctionType" substitutionGroup="fes:expression"/>
  <xsd:complexType name="FunctionType">
    <xsd:sequence>
      <xsd:element ref="fes:expression" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:string" use="required"/>
  </xsd:complexType>

  <xsd:element name="Literal" type="fes:LiteralType" substitutionGroup="fes:expression"/>
  <xsd:complexType name="LiteralType" mixed="true">
    <xsd:sequence>
      <xsd:any minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="type" type="xsd:QName"/>
  </xsd:complexType>

  <xsd:element name="SortBy" type="fes:SortByType" substitutionGroup="fes:AbstractSortingClause"/>

  <xsd:complexType name="SortByType">
    <xsd:sequence>
      <xsd:element name="SortProperty" type="fes:SortPropertyType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="SortPropertyType">
    <xsd:sequence>
      <xsd:element ref="fes:ValueReference"/>
      <xsd:element name="SortOrder" type="fes:SortOrderType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:simpleType name="SortOrderType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="DESC"/>
      <xsd:enumeration value="ASC"/>
    </xsd:restriction>
  </xsd:simpleType>
</xsd:schema>
